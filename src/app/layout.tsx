import type { Metadata } from "next";
// import { Inter } from "next/font/google";
import "./globals.css";
import {
    matchQuery,
    MutationCache,
    QueryClient,
    QueryClientProvider,
    QueryKey,
} from "@tanstack/react-query";
import React from "react";

declare module "@tanstack/react-query" {
    interface Register {
        // queryMeta: MyMeta;
        mutationMeta: {
            invalidates?: QueryKey[];
        };
    }
}

// const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
    title: "Create Next App",
    description: "Generated by create next app",
};

const queryClient = new QueryClient({
    mutationCache: new MutationCache({
        onSuccess(data, variables, context, mutation) {
            queryClient.invalidateQueries({
                predicate: query =>
                    // invalidate all matching tags at once
                    // or everything if no meta is provided
                    mutation.meta?.invalidates?.some(queryKey =>
                        matchQuery({ queryKey }, query)
                    ) ?? true,
            });
        },
    }),
});

export default function RootLayout({
    children,
}: Readonly<{
    children: React.ReactNode;
}>) {
    return (
        <html lang="en">
            <body>
                <QueryClientProvider client={queryClient}>
                    {children}
                </QueryClientProvider>
            </body>
        </html>
    );
}
